// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.0
// source: products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetByIdRequest, sortingValues, SuccessResponse } from "./constants";

export const protobufPackage = "products";

export interface Product {
  id: number;
  name: string;
  description: string;
  discount: number;
  sold: number;
  count: number;
  rate: number;
  price: number;
  categoryId: number;
  slug: string;
  reviews: number;
  category: Category | undefined;
  images: ProductImage[];
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface SortingProducts {
  id?: sortingValues | undefined;
  name?: sortingValues | undefined;
  discount?: sortingValues | undefined;
  sold?: sortingValues | undefined;
  count?: sortingValues | undefined;
  rate?: sortingValues | undefined;
  price?: sortingValues | undefined;
  createdAt?: sortingValues | undefined;
}

export interface CreateProductRequest {
  name: string;
  description: string;
  discount?: number | undefined;
  count: number;
  price: number;
  categoryId: number;
}

export interface UpdateProductRequest {
  id: number;
  name?: string | undefined;
  description?: string | undefined;
  discount?: number | undefined;
  count?: number | undefined;
  price?: number | undefined;
  categoryId?: number | undefined;
}

export interface GetProductBySlug {
  slug: string;
}

export interface ProductResponse {
  product: Product | undefined;
}

export interface GetProductsRequest {
  page?: number | undefined;
  limit?: number | undefined;
  search?: string | undefined;
  categoryId?: number | undefined;
  ids: number[];
  orderBy?: SortingProducts | undefined;
}

export interface GetProductsResponse {
  count: number;
  products: Product[];
}

export interface ProductImage {
  id: number;
  size: number;
  name: string;
  productId?: number | undefined;
}

export interface CreateProductImage {
  size: number;
  name: string;
  productId: number;
}

export interface CreateProductImages {
  images: CreateProductImage[];
}

export interface ProductImages {
  images: ProductImage[];
}

export interface Category {
  id: number;
  name: string;
  image: string;
  description: string;
  parentId?: number | undefined;
  childrens: Category[];
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface CategoryResponse {
  category: Category | undefined;
}

export interface CreateCategoryRequest {
  name: string;
  image: string;
  description: string;
  parentId?: number | undefined;
}

export interface UpdateCategoryRequest {
  id: number;
  name?: string | undefined;
  image?: string | undefined;
  description?: string | undefined;
  parentId?: number | undefined;
}

export interface GetCategoriesRequest {
  page: number;
  limit: number;
  search?: string | undefined;
  parentId?: number | undefined;
}

export interface GetCategoriesResponse {
  count: number;
  categories: Category[];
}

export const PRODUCTS_PACKAGE_NAME = "products";

export interface ProductsServiceClient {
  getProduct(request: GetProductBySlug): Observable<ProductResponse>;

  getProducts(request: GetProductsRequest): Observable<GetProductsResponse>;

  createProduct(request: CreateProductRequest): Observable<ProductResponse>;

  updateProduct(request: UpdateProductRequest): Observable<ProductResponse>;

  deleteProduct(request: GetByIdRequest): Observable<SuccessResponse>;

  createImage(request: ProductImage): Observable<ProductImage>;

  createImages(request: CreateProductImages): Observable<ProductImages>;

  deleteImage(request: GetByIdRequest): Observable<SuccessResponse>;
}

export interface ProductsServiceController {
  getProduct(request: GetProductBySlug): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  getProducts(
    request: GetProductsRequest,
  ): Promise<GetProductsResponse> | Observable<GetProductsResponse> | GetProductsResponse;

  createProduct(
    request: CreateProductRequest,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  updateProduct(
    request: UpdateProductRequest,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  deleteProduct(request: GetByIdRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;

  createImage(request: ProductImage): Promise<ProductImage> | Observable<ProductImage> | ProductImage;

  createImages(request: CreateProductImages): Promise<ProductImages> | Observable<ProductImages> | ProductImages;

  deleteImage(request: GetByIdRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;
}

export function ProductsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getProduct",
      "getProducts",
      "createProduct",
      "updateProduct",
      "deleteProduct",
      "createImage",
      "createImages",
      "deleteImage",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCTS_SERVICE_NAME = "ProductsService";

export interface CategoriesServiceClient {
  getCategories(request: GetCategoriesRequest): Observable<GetCategoriesResponse>;

  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<CategoryResponse>;

  deleteCategory(request: GetByIdRequest): Observable<SuccessResponse>;
}

export interface CategoriesServiceController {
  getCategories(
    request: GetCategoriesRequest,
  ): Promise<GetCategoriesResponse> | Observable<GetCategoriesResponse> | GetCategoriesResponse;

  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  deleteCategory(request: GetByIdRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;
}

export function CategoriesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getCategories", "createCategory", "updateCategory", "deleteCategory"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoriesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoriesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORIES_SERVICE_NAME = "CategoriesService";
