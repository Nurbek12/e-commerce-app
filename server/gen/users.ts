// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.0
// source: users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { GetByIdRequest, sortingValues, SuccessResponse } from "./constants";

export const protobufPackage = "users";

export enum userRoles {
  ADMIN = 0,
  USER = 1,
  COURIER = 2,
  SELLER = 3,
  UNRECOGNIZED = -1,
}

export interface User {
  id: number;
  phone: string;
  role: userRoles;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  totalOrders?: number | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface SortingUsers {
  id?: sortingValues | undefined;
  firstName?: sortingValues | undefined;
  lastName?: sortingValues | undefined;
  role?: sortingValues | undefined;
  totalOrders?: sortingValues | undefined;
  createdAt?: sortingValues | undefined;
}

export interface GetUsersRequest {
  page?: number | undefined;
  limit?: number | undefined;
  search?: string | undefined;
  ids: number[];
  orderBy?: SortingUsers | undefined;
}

export interface UserResponse {
  user: User | undefined;
}

export interface GetUsersResponse {
  count: number;
  users: User[];
}

export interface GetUserRequest {
  id?: number | undefined;
  email?: string | undefined;
  phone?: string | undefined;
}

export interface CreateUserRequest {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  phone: string;
  role: userRoles;
}

export interface UpdateUserRequest {
  id?: number | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  password?: string | undefined;
  role?: userRoles | undefined;
  totalOrders?: number | undefined;
}

/** Reviews */
export interface Review {
  id: number;
  rating: number;
  text: string;
  userId: number;
  user?: User | undefined;
  productId: number;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
}

export interface CreateReviewRequest {
  text: string;
  rating: number;
  userId: number;
  productId: number;
}

export interface UpdateReviewRequest {
  id: number;
  rating?: number | undefined;
  text?: string | undefined;
  userId?: number | undefined;
  productId?: number | undefined;
}

export interface SortingReviews {
  id?: sortingValues | undefined;
  rating?: sortingValues | undefined;
  createdAt?: sortingValues | undefined;
}

export interface GetReviewsRequest {
  page: number;
  limit: number;
  search?: string | undefined;
  productId?: number | undefined;
  userId?: number | undefined;
  orderBy?: SortingReviews | undefined;
}

export interface GetReviewsResponse {
  count: number;
  reviews: Review[];
}

export interface ReviewsResponse {
  review: Review | undefined;
}

export const USERS_PACKAGE_NAME = "users";

export interface UsersServiceClient {
  getUsers(request: GetUsersRequest): Observable<GetUsersResponse>;

  getUser(request: GetUserRequest): Observable<UserResponse>;

  createUser(request: CreateUserRequest): Observable<UserResponse>;

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  deleteUser(request: GetByIdRequest): Observable<SuccessResponse>;
}

export interface UsersServiceController {
  getUsers(request: GetUsersRequest): Promise<GetUsersResponse> | Observable<GetUsersResponse> | GetUsersResponse;

  getUser(request: GetUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  createUser(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(request: GetByIdRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUsers", "getUser", "createUser", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";

export interface ReviewsServiceClient {
  getReviews(request: GetReviewsRequest): Observable<GetReviewsResponse>;

  createReview(request: CreateReviewRequest): Observable<ReviewsResponse>;

  updateReview(request: UpdateReviewRequest): Observable<ReviewsResponse>;

  deleteReview(request: GetByIdRequest): Observable<SuccessResponse>;
}

export interface ReviewsServiceController {
  getReviews(
    request: GetReviewsRequest,
  ): Promise<GetReviewsResponse> | Observable<GetReviewsResponse> | GetReviewsResponse;

  createReview(request: CreateReviewRequest): Promise<ReviewsResponse> | Observable<ReviewsResponse> | ReviewsResponse;

  updateReview(request: UpdateReviewRequest): Promise<ReviewsResponse> | Observable<ReviewsResponse> | ReviewsResponse;

  deleteReview(request: GetByIdRequest): Promise<SuccessResponse> | Observable<SuccessResponse> | SuccessResponse;
}

export function ReviewsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getReviews", "createReview", "updateReview", "deleteReview"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReviewsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReviewsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REVIEWS_SERVICE_NAME = "ReviewsService";
